version: 0.2
phases:
  install:
    commands:

      - pwd
      - ls -lh 
      - ls -lh src/handlers


      # - if [ -z ".aws-sam/" ]; then rm -r .aws-sam; fi
      # mkdir nodejs && cp -r node_modules nodejs/

      # - npm uninstall node_modules
      # - pwd
      # - ls -lh node_modules

      # - if [ -z "node_modules" ]; then rm -r node_modules; fi
      # - pwd
      # - ls -lh node_modules


      # Install all dependencies (including dependencies for running tests)
      - npm install --omit=dev
      # - pwd
      # - ls -lh node_modules

      # - npm install -g typescript

      - npm install esbuild
      # - pwd
      # - ls -lh

  pre_build:
    commands:
      # Discover and run unit tests in the '__tests__' directory
      #- npm run test

  build:
    commands:

      # - tsc --build --listFiles ./src/handlers/s3-json-logger.ts --verbose      
      # - tsc --noemit ./src/handlers/s3-json-logger.ts 
      # - pwd
      # - ls -lh src/

      # - npm run build --debug --verbose
      # - pwd
      # - ls -lh

      # sam build -m package.json
      - sam build --debug

      # - pwd
      # - ls -lh
      # - ls -lh .aws-sam
      # - ls -lh .aws-sam/build
      # - ls -lh .aws-sam/build/src

      # - sam build
      # - pwd
      # - ls -lh

      # - cd src/handlers && zip -r s3-json-logger.zip s3-json-logger.js*
      # - cd ../../

      # - npm pack

      # - rm -r node_modules

      - npm ci --omit=dev --loglevel verbose
      # - pwd
      # - ls -lh node_modules

      # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
      # - npm prune --production --loglevel verbose
      - npm prune --omit=dev --loglevel verbose

      # a- npm install --omit=dev --loglevel verbose

      # - codebuild-breakpoint

      - pwd
      - ls -lh
      - if [ -z "nodejs/" ]; then rm -r nodejs/; fi
      - mkdir nodejs && cp -r node_modules nodejs/
      - ls -lh
      - ls -lh nodejs
      - ls -lh nodejs/node_modules

      - ls -lh .aws-sam
      - ls -lh .aws-sam/build


      - sam package --s3-bucket aws-us-east-1-777957353822-tricklercache-pipe
      # - sam package --resolve-s3 --s3-bucket deploy 
      # - sam package --resolve-s3 --s3-bucket deploy 

      # Use AWS SAM to package the application by using AWS CloudFormation
      # - aws cloudformation package --debug --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml
      - aws cloudformation package --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml
      # - sam package --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml

      # - pwd
      # - ls -lh

  post_build:
    commands:
      - pwd 
      - ls -lh 

artifacts:
  files:
    - template-export.yml
