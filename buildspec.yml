version: 0.2
phases:
  install:
    commands:
      # Install all dependencies (including dependencies for running tests)
      # - pwd
      # - ls -lh
      - npm remove node_modules --loglevel verbose

  pre_build:
    commands:
      # - pwd 
      # - ls -lh
      # - rm -r .aws-sam

      # Discover and run unit tests in the '__tests__' directory
      #- npm run test

      # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
     
      - rm -r node_modules

      # - npm ci --loglevel verbose
      # - npm prune --production --loglevel verbose
      # - npm prune --production --loglevel verbose

      - npm install --omit=dev --loglevel verbose
      # - codebuild-breakpoint

      # - pwd
      # - ls -lh
      
  build:
    commands: 
      - pwd 
      - ls -lh
      - esbuild ./src/handlers/s3-json-logger.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=./src/handlers/s3-json-logger.js
      - ls -lh 
      
      # - cd src/handlers && zip -r s3-json-logger.zip s3-json-logger.js*
      # - cd ../../
      - npm pack 

        # Use AWS SAM to package the application by using AWS CloudFormation
      # - aws cloudformation package --debug --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml
      # - aws cloudformation package --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml
      - sam package --template-file template.yml --s3-bucket $S3_BUCKET --output-template-file template-export.yml
      
      - pwd 
      - ls -lh
    post_build:
      commands:
        - cd nodes_modules
        - ls -lh 

artifacts:
  files:
    - template-export.yml
