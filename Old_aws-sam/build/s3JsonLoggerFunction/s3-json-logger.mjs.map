{
  "version": 3,
  "sources": ["../../../../../../../../../../../private/var/folders/_8/cql5f2ds11d9pfn4l_fl50g40000gp/T/tmpany2xyp4/src/handlers/s3-json-logger.ts"],
  "sourcesContent": ["\"use strict\";\nimport { S3, S3Client, S3ClientConfig, GetObjectCommand, GetObjectCommandOutput, DeleteObjectCommand, DeleteObjectCommandInput, DeleteObjectCommandOutput, DeleteObjectOutput, DeleteObjectRequest } from \"@aws-sdk/client-s3\"\nimport { Handler, S3Event, Context } from \"aws-lambda\"\nimport fetch from \"node-fetch\"\n\n\n// import { packageJson } from '@aws-sdk/client3/package.json'\n// const version = packageJson.version\n\n// const path = require('path');\n// const util = require('util');\n\n// import { HttpRequest } from '@aws-sdk/protocol-http';\n// import type { HttpHandlerOptions } from '@aws-sdk/types';\n// import { FetchHttpHandler, FetchHttpHandlerOptions } from '@aws-sdk/fetch-http-handler'\n// import { default as fetch } from '@aws-sdk/fetch-http-handler/node_modules/@smithy/fetch-http-handler'\n// import { FetchHttpHandler, FetchHttpHandlerOptions} from '@aws-sdk/client-s3/dist-types/'\n\n\n// import { Readable } from \"stream\";\n\n\n\n// import { GetObjectCommand } from \"@aws-sdk/client-s3\"\n\n// const g: FetchHttpHandlerOptions = {}\n// const f = new FetchHttpHandler(g)\n\n\n\n\nexport interface S3Object {\n    Bucket: string\n    Key: string\n    Region: string\n}\n\n\n/**\n  * A Lambda function to process the Event payload received from S3.\n  */\n\n\n// Create a client to read objects from S3\nconst s3 = new S3Client({ region: \"us-east-1\", });\n\n\n\nexport interface accessResp {\n    access_token: string\n    token_type: string\n    refresh_token: string\n    expires_in: number\n}\n\nexport interface authCreds {\n    accessToken: string\n    clientId: string\n    clientSecret: string\n    refreshToken: string\n    refreshTokenUrl: string\n}\n\nexport const s3JsonLoggerHandler: Handler = async (event: S3Event, context: Context) => {\n\n    // console.log(`AWS-SDK Version: ${version}`)\n    console.log('ENVIRONMENT VARIABLES\\n' + JSON.stringify(process.env, null, 2))\n\n    console.log(\"Processing Trigger from Event: \", event.Records[0].responseElements[\"x-amz-request-id\"])\n\n\n    if  ( event.Records.length > 1)    throw new Error(`Expecting only a single S3 Object from a Triggered S3 write of a new Object, received ${event.Records.length} Objects`)\n    else console.log(\"Num of Events to be processed: \", event.Records.length)\n    \n    \n    \n    const getS3Obj = async () => {\n\n        const data = await s3.send(\n            new GetObjectCommand({\n                Key: event.Records[0].s3.object.key,\n                Bucket: event.Records[0].s3.bucket.name\n            })\n        )\n\n        console.log(\"Received the following Object: \\n\", data.Body?.toString());\n\n\n        const del = await s3.send(\n            new DeleteObjectCommand({\n                Key: event.Records[0].s3.object.key,\n                Bucket: event.Records[0].s3.bucket.name\n            })\n        )\n\n        console.log(`Response from deleteing Object ${event.Records[0].responseElements[\"x-amz-request-id\"]} \\n ${del.$metadata.toString()}`);\n\n    };\n\n    getS3Obj();\n\n\n\n\n    // // //usage\n    // const s3Config: S3ClientConfig = \"\" \n    // const bareBonesS3 = new S3Client(s3Config.endpoint);\n    // await bareBonesS3.send(new GetObjectCommand({...}));\n\n\n\n\n    // try {\n    //     const a = await pullS3Object(params)\n    //     const b = await postCampaign(a as string)\n    //     console.log(\"Return from Post to Campaign: \\n\", b)\n    // } catch (e) {\n    //     console.log(\"Exception during Pull or Post: /n\", e)\n    // }\n\n    // return context.logStreamName;\n};\n\nexport default s3JsonLoggerHandler\n\n\n\n\nasync function pullS3Object(params: S3Object) {\n    try {\n        console.log(\"Pulling S3 Object\\n\", params.Bucket, '\\n', params.Key);\n\n        const command = new GetObjectCommand({\n            Key: params.Key,\n            Bucket: params.Bucket,\n        });\n\n        const s3Item: GetObjectCommandOutput = await s3.send(command);\n        return s3Item.Body?.transformToString();\n\n    } catch (e) {\n        console.log(\"Pull S3Object Exception:\", e);\n    }\n}\n\nexport async function postCampaign(xmlCalls: string) {\n\n    const accessToken = getAccessToken()\n    console.log(\"Access Token: \", accessToken)\n\n\n    try {\n        const r = await fetch('https://api-campaign-us-6.goacoustic.com/XMLAPI', {\n            method: 'POST',\n            // body: JSON.stringify(xmlCalls),\n            body: xmlCalls,\n            headers: {\n                'Authorization': `Bearer: ${accessToken}`,\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(res => res.json())\n            .then(json => {\n                console.log(\"Return from POST Campaign: \\n\", json)\n                return JSON\n            })\n\n    } catch (e) {\n        console.log(\"Exception during POST to Campaign: \\n\", e)\n    }\n}\n\n\nexport async function getAccessToken() {\n\n    const ac: authCreds = {\n        accessToken: \"\",\n        clientId: \"\",\n        clientSecret: \"\",\n        refreshToken: \"\",\n        refreshTokenUrl: \"\"\n    }\n\n    ac.accessToken = ''\n    ac.clientId = '1853dc2f-1a79-4219-b538-edb018be9d52'\n    ac.clientSecret = '329f1765-0731-4c9e-a5da-0e8f48559f45'\n    ac.refreshToken = 'r7nyDaWJ6GYdH5l6mlR9uqFqqrWZvwKD9RSq-hFgTMdMS1'\n    ac.refreshTokenUrl = `https://api-campaign-us-6.goacoustic.com/oauth/token`\n    //https://api-campaign-us-6.goacoustic.com/XMLAPI\n\n    try {\n        const rat = await fetch(ac.refreshTokenUrl, {\n            method: 'POST',\n            body: new URLSearchParams({\n                refresh_token: ac.refreshToken,\n                client_id: ac.clientId,\n                client_secret: ac.clientSecret,\n                grant_type: 'refresh_token'\n            }),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'User-Agent': 'S3 TricklerCache GetAccessToken'\n            }\n        })\n        const ratResp = (await rat.json()) as accessResp\n        ac.accessToken = ratResp.access_token\n\n        return { accessToken: ac.accessToken, refreshToken: ac.refreshToken }\n    } catch (e) {\n        console.log(\"Exception in getAccessToken: \\n\", e)\n    }\n}"],
  "mappings": ";AACA,SAAa,UAA0B,kBAA0C,2BAAyH;AAE1M,OAAO,WAAW;AAyClB,IAAM,KAAK,IAAI,SAAS,EAAE,QAAQ,YAAa,CAAC;AAmBzC,IAAM,sBAA+B,OAAO,OAAgB,YAAqB;AAGpF,UAAQ,IAAI,4BAA4B,KAAK,UAAU,QAAQ,KAAK,MAAM,CAAC,CAAC;AAE5E,UAAQ,IAAI,mCAAmC,MAAM,QAAQ,CAAC,EAAE,iBAAiB,kBAAkB,CAAC;AAGpG,MAAM,MAAM,QAAQ,SAAS;AAAM,UAAM,IAAI,MAAM,yFAAyF,MAAM,QAAQ,MAAM,UAAU;AAAA;AACrK,YAAQ,IAAI,mCAAmC,MAAM,QAAQ,MAAM;AAIxE,QAAM,WAAW,YAAY;AAEzB,UAAM,OAAO,MAAM,GAAG;AAAA,MAClB,IAAI,iBAAiB;AAAA,QACjB,KAAK,MAAM,QAAQ,CAAC,EAAE,GAAG,OAAO;AAAA,QAChC,QAAQ,MAAM,QAAQ,CAAC,EAAE,GAAG,OAAO;AAAA,MACvC,CAAC;AAAA,IACL;AAEA,YAAQ,IAAI,qCAAqC,KAAK,MAAM,SAAS,CAAC;AAGtE,UAAM,MAAM,MAAM,GAAG;AAAA,MACjB,IAAI,oBAAoB;AAAA,QACpB,KAAK,MAAM,QAAQ,CAAC,EAAE,GAAG,OAAO;AAAA,QAChC,QAAQ,MAAM,QAAQ,CAAC,EAAE,GAAG,OAAO;AAAA,MACvC,CAAC;AAAA,IACL;AAEA,YAAQ,IAAI,kCAAkC,MAAM,QAAQ,CAAC,EAAE,iBAAiB,kBAAkB,CAAC;AAAA,GAAO,IAAI,UAAU,SAAS,CAAC,EAAE;AAAA,EAExI;AAEA,WAAS;AAsBb;AAEA,IAAO,yBAAQ;AAsBf,eAAsB,aAAa,UAAkB;AAEjD,QAAM,cAAc,eAAe;AACnC,UAAQ,IAAI,kBAAkB,WAAW;AAGzC,MAAI;AACA,UAAM,IAAI,MAAM,MAAM,mDAAmD;AAAA,MACrE,QAAQ;AAAA;AAAA,MAER,MAAM;AAAA,MACN,SAAS;AAAA,QACL,iBAAiB,WAAW,WAAW;AAAA,QACvC,gBAAgB;AAAA,MACpB;AAAA,IACJ,CAAC,EACI,KAAK,SAAO,IAAI,KAAK,CAAC,EACtB,KAAK,UAAQ;AACV,cAAQ,IAAI,iCAAiC,IAAI;AACjD,aAAO;AAAA,IACX,CAAC;AAAA,EAET,SAAS,GAAG;AACR,YAAQ,IAAI,yCAAyC,CAAC;AAAA,EAC1D;AACJ;AAGA,eAAsB,iBAAiB;AAEnC,QAAM,KAAgB;AAAA,IAClB,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,IACd,cAAc;AAAA,IACd,iBAAiB;AAAA,EACrB;AAEA,KAAG,cAAc;AACjB,KAAG,WAAW;AACd,KAAG,eAAe;AAClB,KAAG,eAAe;AAClB,KAAG,kBAAkB;AAGrB,MAAI;AACA,UAAM,MAAM,MAAM,MAAM,GAAG,iBAAiB;AAAA,MACxC,QAAQ;AAAA,MACR,MAAM,IAAI,gBAAgB;AAAA,QACtB,eAAe,GAAG;AAAA,QAClB,WAAW,GAAG;AAAA,QACd,eAAe,GAAG;AAAA,QAClB,YAAY;AAAA,MAChB,CAAC;AAAA,MACD,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,cAAc;AAAA,MAClB;AAAA,IACJ,CAAC;AACD,UAAM,UAAW,MAAM,IAAI,KAAK;AAChC,OAAG,cAAc,QAAQ;AAEzB,WAAO,EAAE,aAAa,GAAG,aAAa,cAAc,GAAG,aAAa;AAAA,EACxE,SAAS,GAAG;AACR,YAAQ,IAAI,mCAAmC,CAAC;AAAA,EACpD;AACJ;",
  "names": []
}
