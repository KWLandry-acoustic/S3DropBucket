AWSTemplateFormatVersion: 2010-09-09
Description: Lambda-S3 Logging Project
Transform: AWS::Serverless-2016-10-31
Globals: 
  Function:
    PermissionsBoundary: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary
Parameters:
  AppId:
    Type: String
Resources:
  dependencyLayer:
    # Type: AWS::Lambda::LayerVersion
    Type: AWS::Serverless::LayerVersion 
    Metadata:
    #     BuildMethod: makefile
      BuildMethod: nodejs18.x
    Properties:
        # arn: arn:aws:lambda:us-east-1:777957353822:layer:dependencyLayer
        # RetentionPolicy: Retain
        LayerName: dependencyLayer
        Description:  Layer to Hold all Dependencies (reduce package size) 
        ContentUri: layers
        #   # S3Bucket: s3JsonLoggerDependenciesLayer
        #   # S3Key: nodejs.zip
        CompatibleRuntimes:
          - nodejs18.x

  s3JsonLoggerFunction:
    # Type: "AWS::Lambda::Function"
    Type: AWS::Serverless::Function
    Properties:
      # Environment:
      #       Variables:
      #         TEST_VAR1: testvar
      #         STAGE: prod
      #         Last Modified:  08/24/2023
      Description: A Lambda function triggered on a file sent to an S3 bucket.
      Role: arn:aws:iam::777957353822:role/tricklercacheExecutionRole 
      CodeUri: ./           #---Gets reBuilt in SAM Package
      # Handler: s3-json-logger.s3JsonLoggerHandler 
      # Handler: .aws-sam/build/s3JsonLoggerFunction/s3-json-logger.s3JsonLoggerHandler  
      Handler: s3-json-logger.s3JsonLoggerHandler
      Runtime: nodejs18.x
      Architectures: 
        - x86_64
      MemorySize: 512
      Timeout: 899
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName} 
      Layers:
        - !Ref dependencyLayer
    #Build Parameters
    Metadata:    
      BuildMethod: esbuild
      Architecture: x86_64
      BuildProperties:
        # Target: es2020
        Target: node18.12
        Format: esm
        Platform: node
        Packages: external
        # mainFields: 
        #   --main-fields=module, main
        Minify: false
        OutExtension:
          - .js=.mjs
        Sourcemap: false
        EntryPoints: 
          - src/handlers/s3-json-logger.ts
          # - !Sub ${CodeUri}
          # - !GetAtt s3JsonLoggerFunction.CodeUri
          # - !Sub ${s3JsonLoggerFunction.CodeUri}
          # - s3-json-logger.mjs
          # - .aws-sam/build/s3JsonLoggerFunction/s3-json-logger.mjs

      # CodeUri: arn:aws:s3:::aws-us-east-1-777957353822-tricklercache-pipe/${codeuri}      
      # CodeUri: ${CodeUri}
# CodeUri
# The code for the function. Accepted values include: 
# The function's Amazon S3 URI. For example, s3://bucket-123456789/sam-app/1234567890abcdefg.
# The local path to the function. For example, hello_world/.
# A FunctionCode object. If you provide a function's Amazon S3 URI or FunctionCode object, you must reference a valid 
# Lambda deployment package.  If you provide a local file path, use the AWS SAM CLI to upload the local file at deployment. 
# To learn more, see Using the AWS SAM CLI to upload local files at deployment.  
# Type: [ String | FunctionCode ]  Required: Conditional. 
# When PackageType is set to Zip, one of CodeUri or InlineCode is required.  
# AWS CloudFormation compatibility: 
# This property is similar to the [ Code](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-code) 
# property of an AWS::Lambda::Function resource. The nested Amazon S3 properties are named differently.
      # CodeUri: ./







        External: 
            - '@aws-sdk/client-s3'
            - 'node-fetch'
            - 'nodejs'
            - '@aws-sdk/fetch-http-handlerdeps/node-fetch'
            - '@aws-sdk/client3/package.json'
  
  
  
  #Can only define a new S3 Bucket on creation (first run), and then an existing bucket can only have a trigger added manually, 
  # tricklercache:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: tricklercache
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256

  #Can only define a trigger on creation, existing buckets can only have a trigger added manually, 
  # Events:                 
  #   tricklercacheEvent:
  #     Type: S3
  #     Properties:
  #       # Bucket: !Sub ${BucketName}
  #       Bucket: tricklercache 
  #       Events: s3:ObjectCreated:*
  #       Filter:
  #         S3Key:
  #           Rules:
  #             - Name: suffix
  #               Value: .json



