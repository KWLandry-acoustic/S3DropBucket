AWSTemplateFormatVersion: 2010-09-09
Description: Lambda-S3 DropBucket Project
Transform: AWS::Serverless-2016-10-31
Globals: 
  Function:
    PermissionsBoundary: arn:aws:iam::777957353822:policy/tricklercache-us-east-1-PermissionsBoundary
Parameters:
  AppId: 
    Type: String
Resources:
  dependencyLayer:
    # Type: AWS::Lambda::LayerVersion
    Type: AWS::Serverless::LayerVersion 
    Metadata:
    #     BuildMethod: makefile
      BuildMethod: nodejs18.x
    Properties:
        # arn: arn:aws:lambda:us-east-1:777957353822:layer:dependencyLayer
        # RetentionPolicy: Retain
        LayerName: dependencyLayer
        Description:  Layer to Hold all Dependencies (reduce package size) 
        ContentUri: layers/
        #   # S3Bucket: s3JsonLoggerDependenciesLayer
        #   # S3Key: nodejs.zip
        CompatibleRuntimes:
          - nodejs18.x

  s3DropBucketFunction:
    # Type: "AWS::Lambda::Function"
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function triggered on a file dropped on an S3 bucket. The file is then processsed for Impor/Update work with the work Queued to be processed as fast as Campaign APIs allow. 
      Environment:
        Variables:
          Version: !Ref AppId 
          # NODE_OPTIONS: --enable-source-map --trace-warnings --unhandled-rejections=warn
          NODE_OPTIONS: --trace-warnings --unhandled-rejections=warn
      Role: arn:aws:iam::777957353822:role/tricklercacheExecutionRole 
      CodeUri: ./
      # CodeUri: src/handlers/          #---Gets reBuilt in SAM Package 
      Handler: s3DropBucket.s3DropBucketHandler
      Runtime: nodejs18.x
      Architectures: 
        - x86_64
      MemorySize: 752
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName} 
      Layers:
        - !Ref dependencyLayer
    # #Build Parameters
    Metadata:    
      BuildMethod: esbuild
      Architecture: x86_64
      BuildProperties:
        # Target: es2020
        Target: node18.12
        Format: esm
        Platform: node
        Packages: external
        # mainFields: 
        #   --main-fields=module, main
        Minify: false
        OutExtension:
          - .js=.mjs
        Sourcemap: inline
        EntryPoints: 
          - src/handlers/s3DropBucket.ts
        External: 
            - '@aws-sdk/client-s3'
            - 'node-fetch'
            - 'nodejs'
            - '@aws-sdk/fetch-http-handlerdeps/node-fetch'
            - '@aws-sdk/client3/package.json'
  
  S3DropBucketQueueProcessorFunction:
    # Type: "AWS::Lambda::Function"
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function triggered on a file sent to an S3 bucket.
      Environment:
        Variables:
          Version: !Ref AppId 
          # NODE_OPTIONS: --enable-source-map --trace-warnings --unhandled-rejections=warn
          NODE_OPTIONS: --trace-warnings --unhandled-rejections=warn
      Role: arn:aws:iam::777957353822:role/tricklercacheExecutionRole 
      CodeUri: ./
      # CodeUri: src/handlers/          #---Gets reBuilt in SAM Package 
      Handler: s3DropBucket.S3DropBucketQueueProcessorHandler
      Runtime: nodejs18.x
      Architectures: 
        - x86_64
      MemorySize: 752
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName} 
      Layers:
        - !Ref dependencyLayer
    # #Build Parameters
    Metadata:    
      BuildMethod: esbuild
      Architecture: x86_64
      BuildProperties:
        # Target: es2020
        Target: node18.12
        Format: esm
        Platform: node
        Packages: external
        # mainFields: 
        #   --main-fields=module, main
        Minify: false
        OutExtension:
          - .js=.mjs
        Sourcemap: inline
        EntryPoints: 
          - src/handlers/s3DropBucket.ts
        External: 
            - '@aws-sdk/client-s3'
            - 'node-fetch'
            - 'nodejs'
            - '@aws-sdk/fetch-http-handlerdeps/node-fetch'
            - '@aws-sdk/client3/package.json'
  
  s3DropBucketSFTPFunction:
    # Type: "AWS::Lambda::Function"
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function triggered on a file sent to an S3 bucket.
      # Events:
        # Manually defined instead, allows for greater visibility for OPs team
        # ComplexScheduleEvent:
        #   Type: ScheduleV2
        #   Properties:
        #     ScheduleExpression: rate(1 minute)
        #     FlexibleTimeWindow:
        #       Mode: FLEXIBLE
        #       MaximumWindowInMinutes: 5
        #     # StartDate: '2024-02-15T12:00:00.000Z'
        #     EndDate: '2035-01-01T12:00:00.000Z'
        #     ScheduleExpressionTimezone: UTC
        #     RetryPolicy:
        #       MaximumRetryAttempts: 5
        #       MaximumEventAgeInSeconds: 300
        #     DeadLetterConfig:
        #       Type: SQS
      Environment:
        Variables:
          Version: !Ref AppId 
          # NODE_OPTIONS: --enable-source-map --trace-warnings --unhandled-rejections=warn
          NODE_OPTIONS: --trace-warnings --unhandled-rejections=warn
      Role: arn:aws:iam::777957353822:role/tricklercacheExecutionRole 
      CodeUri: ./
      # CodeUri: src/handlers/          #---Gets reBuilt in SAM Package 
      Handler: s3DropBucket.s3DropBucketSFTPHandler
      Runtime: nodejs18.x
      Architectures: 
        - x86_64
      MemorySize: 752
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName} 
      Layers:
        - !Ref dependencyLayer
    # #Build Parameters
    Metadata:    
      BuildMethod: esbuild
      Architecture: x86_64
      BuildProperties:
        # Target: es2020
        Target: node18.12
        Format: esm
        Platform: node
        Packages: external
        # mainFields: 
        #   --main-fields=module, main
        Minify: false
        OutExtension:
          - .js=.mjs
        Sourcemap: inline
        EntryPoints: 
          - src/handlers/s3DropBucket.ts
        External: 
            - '@aws-sdk/client-s3'
            - 'node-fetch'
            - 'nodejs'
            - '@aws-sdk/fetch-http-handlerdeps/node-fetch'
            - '@aws-sdk/client3/package.json'
  

  # Not defined here yet
  # SQS Queues - tricklercacheQueue
  #   Remember to use when defining: "FunctionResponseTypes": ["ReportBatchItemFailures"]
  # 
  #              tricklercache-DeadLetterQueue
  # Resources:
  #     tricklercacheQueue:
  #       Type: "AWS::SQS::Queue"
  #       Properties:
  #         QueueName: "tricklercacheQueue"
  #         VisibilityTimeout: 30
  #         MessageRetentionPeriod: 60
  #         RedrivePolicy:
  #           deadLetterTargetArn:
  #             "Fn::GetAtt":
  #               - tricklercache-DeadLetterQueue
  #               - Arn
  #           maxReceiveCount: 1
  #     tricklercache-DeadLetterQueue:
  #       Type: "AWS::SQS::Queue"
  #       Properties:
  #         QueueName: "tricklercache-DeadLetterQueue"
  #         MessageRetentionPeriod: 1209600   # 14 days in seconds


  # S3 Bucket - tricklercache-process
  
   
  
  #Can only define a new S3 Bucket on creation (first run), and then an existing bucket can only have a trigger added manually, 
  # tricklercache:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: tricklercache
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: AES256

  #Can only define a trigger on creation, existing buckets can only have a trigger added manually, 
  # Events:                 
  #   tricklercacheEvent:
  #     Type: S3
  #     Properties:
  #       # Bucket: !Sub ${BucketName}
  #       Bucket: tricklercache 
  #       Events: s3:ObjectCreated:*
  #       Filter:
  #         S3Key:
  #           Rules:
  #             - Name: suffix
  #               Value: .json



